{"version":3,"sources":["app.js","functions.js","d3-controller.js","exerciseController.js","mainController.js","overviewController.js","exercise.js","overview.js","pick-wheeld3.js","data-service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var app = angular.module('physioApp', ['ngTouch', 'ngRoute', 'hmTouchEvents', 'ngAnimate', 'timer']);\n\napp.config(['$routeProvider', function($routeProvider) {\n    $routeProvider\n        .when('/', {\n            templateUrl: 'views/start.html'\n        })\n        .when('/exercise/:id', {\n            templateUrl: 'views/exercise.html'\n        })\n        .when('/timer', {\n            templateUrl: 'views/timer.html'\n        })\n        .when('/wheel', {\n            templateUrl: 'views/wheel.html'\n        });\n}]);","(function ($) { // iief = Immediately-Invoked Function Expression, mainly useful to limit scope\n    $(function() { // Shorthand for $( document ).ready()\n\n\n\n    });\n}(jQuery));","app.controller('d3Controller', ['$scope', '$route', 'dataService', function($scope, $route, dataService) {\n\n    var elemHeight = 40; // set manually because elem does not exist yet\n    var currentScrollPos;\n\n    // check if exercise\n    if ($route.current.templateUrl.substring(0, 14) == \"views/exercise\") {\n        // get exercise data via service\n        $scope.exercises = dataService.getExercises();\n        var currEx = parseInt($route.current.params.id, 10) - 1;\n        $scope.predefinedRep = $scope.exercises[currEx].predefined.rep;\n        console.log(\"$scope.predefinedRep: \" + $scope.predefinedRep);\n\n        //startvalue calc from predefined\n        $scope.scrollY = - ($scope.predefinedRep - 2) * elemHeight; // height of span\n        console.log(\"$scope.scrollY: \" + $scope.scrollY);\n        currentScrollPos = $scope.scrollY;\n    }\n\n    else if ($route.current.templateUrl.substring(0, 11) == \"views/timer\") {\n        $scope.predefinedMin = '01';\n        $scope.predefinedSec = '30';\n\n        $scope.minutesScrollY = - ($scope.predefinedMin -2) * elemHeight;\n        $scope.secScrollY = - ($scope.predefinedSec -2) * elemHeight;\n        currentScrollPos = $scope.minutesScrollY;\n        var currentScrollPos2 = $scope.secScrollY;\n    }\n\n\n\n\n\n    var amount;\n\n\n    $scope.getOptions = function(_amount){\n        amount = _amount;\n        return new Array(_amount);\n    }\n\n    $scope.getMinSec = function(){\n        return new Array(60);\n    }\n\n    $scope.getIndices = function (_index) {\n        if (_index+1 <= 10){\n            var _indexstring = '0' + _index;\n            return _indexstring;\n        } else {\n            return _index;\n        }\n    }\n\n    $scope.determineActive = function (_index) {\n        if (_index == parseInt($scope.predefinedRep, 10)){\n            // return active element\n            return \"input__active\";\n        } else if (_index == parseInt($scope.predefinedRep, 10) +1 || _index == parseInt($scope.predefinedRep, 10) -1) {\n            // if one more or one less return half active\n            return \"input__active--half\";\n        }\n    }\n\n    $scope.predefinedTime = function (_index, unit) {\n        if (unit == 'min'){\n            if (_index == parseInt($scope.predefinedMin, 10)){\n                // return active element\n                return \"input__active\";\n            } else if (_index == parseInt($scope.predefinedMin, 10) +1 || _index == parseInt($scope.predefinedMin, 10) -1) {\n                // if one more or one less return half active\n                return \"input__active--half\";\n            }\n        } else if (unit == 'sec') {\n            if (_index == parseInt($scope.predefinedSec, 10)){\n                // return active element\n                return \"input__active\";\n            } else if (_index == parseInt($scope.predefinedSec, 10) +1 || _index == parseInt($scope.predefinedSec, 10) -1) {\n                // if one more or one less return half active\n                return \"input__active--half\";\n            }\n        }\n\n    }\n\n    $scope.panInput = function (event) {\n        // remove span panend class in case it was added before\n        $('.span--panend').removeClass('span--panend');\n\n        $scope.scrollY = event.deltaY + currentScrollPos;\n        checkPos();\n    }\n\n    $scope.panMin = function (event) {\n        // remove span panend class in case it was added before\n        $('.span--panend').removeClass('span--panend');\n\n        $scope.minutesScrollY = event.deltaY + currentScrollPos;\n        console.log(\"$scope.minutesScrollY: \" + $scope.minutesScrollY);\n        checkPos();\n    }\n\n    $scope.panSec = function (event) {\n        // remove span panend class in case it was added before\n        $('.span--panend').removeClass('span--panend');\n\n        $scope.secScrollY = event.deltaY + currentScrollPos2;\n        checkPos();\n    }\n\n    $scope.stopPan = function (event) {\n        // save scroll Position to current\n        currentScrollPos = $scope.scrollY;\n        console.log(\"currentScrollPos: \" + currentScrollPos);\n        // check if end at top or bottom reached\n        elemHeight = $('.input__inactive').height();\n        console.log(\"elemHeight: \" + elemHeight);\n\n        var _spans = $('.input__number');\n\n\n        // clean up first\n        removeClasses(_spans);\n        removeInlineStyles(_spans);\n\n\n        // if less than first element\n        if(currentScrollPos > (elemHeight)) {\n            console.log(\"FIRST\");\n            currentScrollPos = elemHeight; // center 1x\n            _spans.first().addClass(\"input__active\");\n            _spans.eq(1).addClass('input__active--half');\n\n        }\n        // if more than last element\n        else if(currentScrollPos < -(amount*elemHeight - 2*elemHeight)){\n            console.log(\"unten drÃ¼ber gescrollt\");\n            currentScrollPos = -(amount*elemHeight - 2*elemHeight);\n            // remove classes and set last element to active\n            var lastSpan = _spans.last();\n            _spans.eq(amount-2).addClass('input__active--half');\n            lastSpan.addClass('input__active');\n        }\n\n\n        var nearestPoint = roundTo(currentScrollPos, 40);\n        var deltaToStop = nearestPoint - currentScrollPos;\n\n\n        // increase css transition duration to animate\n        $('.input__scroll-container').addClass(\"scroll-container--anim\");\n        $scope.scrollY = nearestPoint;\n        var _activeElem = -(nearestPoint/elemHeight -2); // e.g. -160/40 = 4 -2 => -6 (6th elem)\n        //set active class to active Element\n        _spans.eq(_activeElem-1).addClass('input__active');\n        // and set half active classes for accompanying elements\n        _spans.eq(_activeElem).addClass('input__active--half');\n        _spans.eq(_activeElem-2).addClass('input__active--half');\n\n        // set end styles for centered elements:\n\n\n        // check for transition ending\n        $('.scroll-container--anim').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                $('.input__scroll-container').removeClass(\"scroll-container--anim\");\n            }\n        );\n    }\n\n    $scope.stopMin = function (event) {\n        // save scroll Position to current\n        currentScrollPos = $scope.minutesScrollY;\n\n        // check if end at top or bottom reached\n        elemHeight = $('.input__inactive').height();\n\n        if(currentScrollPos > 140) {\n            currentScrollPos = 3*elemHeight;\n        } else if(currentScrollPos < -(amount*elemHeight - 4*elemHeight)){\n            currentScrollPos = -(amount*elemHeight - 4*elemHeight);\n        }\n\n        var nearestPoint = roundTo(currentScrollPos, 40);\n        var deltaToStop = nearestPoint - currentScrollPos;\n\n\n        // increase css transition duration to animate\n        $('.scroll-container--min').addClass(\"scroll-container--anim\");\n        $scope.minutesScrollY = nearestPoint;\n\n        // check for transition ending\n        $('.scroll-container--anim').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                $('.scroll-container--min').removeClass(\"scroll-container--anim\");\n            }\n        );\n\n        checkPos(true, deltaToStop);\n\n    }\n\n    $scope.stopSec = function (event) {\n        // save scroll Position to current\n        currentScrollPos2 = $scope.secScrollY;\n\n        // check if end at top or bottom reached\n        elemHeight = $('.input__inactive').first().height();\n        if(currentScrollPos2 > 140) {\n            currentScrollPos2 = 3*elemHeight;\n        } else if(currentScrollPos2 < -(amount*elemHeight - 4*elemHeight)){\n            currentScrollPos2 = -(amount*elemHeight - 4*elemHeight);\n        }\n\n        var nearestPoint = roundTo(currentScrollPos2, 40);\n        var deltaToStop = nearestPoint - currentScrollPos2;\n\n\n        // increase css transition duration to animate\n        $('.scroll-container--sec').addClass(\"scroll-container--anim\");\n        $scope.secScrollY = nearestPoint;\n\n        // check for transition ending\n        $('.scroll-container--anim').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                $('.scroll-container--sec').removeClass(\"scroll-container--anim\");\n            }\n        );\n\n        checkPos(true, deltaToStop);\n\n    }\n\n\n    // ------------------- 3d.js -------------------\n\n    $scope.d3Transform = function(){\n        d3.selectAll(\".input__number\").transition()\n            .duration(750)\n            .style('color', 'red');\n    }\n\n\n    function checkPos(last, endPosition){\n        // set last to default value false\n        last = typeof last !== 'undefined' ? last : false;\n\n        // center of wrap to determine, which span should transform\n        // center + position of wrap from top\n        var middle = $('.input__wrap').height() / 2 + $('.input__wrap')[0].getBoundingClientRect().top;\n        elemHeight = $('.input__inactive').first().height();\n        var selectionRange = {\n            min: middle - elemHeight/2,\n            max: middle + elemHeight/2\n        }\n        var transitionRange = {\n            min: selectionRange.min - elemHeight,\n            max: selectionRange.max + elemHeight/2\n        }\n\n\n        d3.selectAll(\".input__number\").each( function(d) {\n            var scaleValue, opacityValue;\n            var position = $(this)[0].getBoundingClientRect().top\n\n            if (last) {\n                // modify position if pan stopped and set wanted end pos\n                position = position + endPosition;\n            }\n\n            var range = position + $(this).height();\n            $(this).attr('data-pos', position);\n\n            if( selectionRange.min < position && position < middle){\n                scaleValue = \"scale(1) translateZ(0)\";\n                opacityValue = 1;\n                logValue = \"CASE: 0 â MIDDLE\";\n                // set active class\n                d3.select(this).classed('input__active', true);\n            }\n\n            else if ( transitionRange.min <= position && position <= selectionRange.min ) {\n                // remove classes\n                d3.select(this).classed('input__active', false);\n                // return a mapped value\n                var mappedScale = mapRange( position, transitionRange.min, selectionRange.min, 0.5, 1 );\n                opacityValue = mapRange( position, transitionRange.min, selectionRange.min, 0.2, 1 );\n                scaleValue = (\"scale(\" + mappedScale + \") translateZ(0)\" );\n                logValue = \"CASE: 1 â TRANS LOW\";\n            }\n\n            else if ( middle <= position && position <= transitionRange.max ) {\n\n                // remove classes\n                d3.select(this).classed('input__active', false);\n                // return a mapped value\n                var mappedScale = mapRange( position, middle, transitionRange.max, 1, 0.5 );\n                opacityValue = mapRange( position, middle, transitionRange.max, 1, 0.2 );\n                scaleValue = (\"scale(\" + mappedScale + \") translateZ(0)\" );\n                logValue = \"CASE: 2 â TRANS HIGH\";\n            }\n\n            else {\n                scaleValue = \"scale(0.5) translateZ(0)\";\n                opacityValue = 0.2;\n                logValue = \"CASE: 3 â ELSE\";\n            }\n\n            // if is last check after panMove -> set css transitions\n            if(last==true){\n                // add class which sets transitions in css\n                d3.select(this).classed('span--panend', true);\n            }\n\n            d3.select(this).style('-webkit-transform', scaleValue);\n            d3.select(this).style('opacity', opacityValue);\n\n        });\n    }\n\n    //mapping function\n    function mapRange(value, low1, high1, low2, high2) {\n        return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    }\n\n    //round function\n    function roundTo(num, round){\n        return Math.round(num/round) * round;\n    }\n\n    //remove classes\n    function removeClasses(_elem) {\n        _elem.removeClass('input__active input__active--half');\n    }\n\n    //remove inline style to make css effective again\n    function removeInlineStyles(_elem) {\n        _elem.css({\n            opacity : \"\",\n            transform: \"\"\n        });\n    }\n\n    // $scope.timerRunning = true;\n    // $scope.startTimer = function (){\n    //     $scope.$broadcast('timer-start');\n    //     $scope.timerRunning = true;\n    // };\n    // $scope.stopTimer = function (){\n    //     $scope.$broadcast('timer-stop');\n    //     $scope.timerRunning = false;\n    // };\n\n    // angular timer\n\n    // liste to end of timer\n    $scope.$on('timer-stopped', function (event, args) {\n        console.log('timer-stopped args = ', args);\n    });\n\n\n\n\n}]);","app.controller('exerciseController', ['$scope', '$rootScope', '$route', '$location', 'dataService', function($scope, $rootScope, $route, $location, dataService) {\n\n    $scope.infoDeltaY = 0;\n    $scope.exercises = dataService.getExercises();\n    $scope.totalExercises = $scope.exercises.length;\n\n\n\n    $scope.prev = function () {\n        console.log(\"prev\");\n        var prevEx = parseInt($route.current.params.id, 10) -1;\n        if(prevEx > 0){\n            // hide overview\n            $('.overview').hide();\n            // class to check if anim from left or right\n            $('body').addClass('anim-from-left');\n            $('body').removeClass('anim-from-right');\n            $location.path('/exercise/' + prevEx);\n        }\n    }\n\n    $scope.next = function () {\n        var nextEx = parseInt($route.current.params.id, 10) +1;\n        if(nextEx <= $scope.totalExercises){\n            // hide overview\n            $('.overview').hide();\n            // class to check if anim from left or right\n            $('body').addClass('anim-from-right');\n            $('body').removeClass('anim-from-left');\n            $location.path('/exercise/' + nextEx);\n        }\n    }\n\n    $scope.currentExercise = function () {\n        return $scope.exercises[$route.current.params.id -1];\n    }\n\n    $scope.panInfoUp = function (event) {\n        // console.log(event.deltaY);\n        // set transition to 0 to have instantaneous reaction\n        $scope.infoTransition = 0; // in seconds\n        $rootScope.$emit('overview:setTransitionSpeed', { speed: 0});\n        if(event.deltaY < -40){\n            console.log(\"event.deltaY: \" + event.deltaY);\n            $scope.infoDeltaY = event.deltaY;\n        } else if(event.deltaY > 50){\n            // send hint to pan down\n            $rootScope.$emit('overview:panDown', { y: event.deltaY });\n            // and pan down info with color\n            $scope.infoDeltaY = event.deltaY;\n        }\n    }\n\n\n\n    $scope.overviewShowEmit = function() {\n        $rootScope.$emit('overview:show');\n    }\n\n    $scope.stopPanInfo = function (event) {\n        $rootScope.$emit('overview:setTransitionSpeed', { speed: 0});\n        // if over threshold -> move up totally\n        if($scope.infoDeltaY < -100 ){\n            $scope.infoTransition = 0.2; // in seconds\n            // +50 for padding and margin\n            $scope.infoDeltaY = - ($('.exercise__info').height() + 50);\n            // = exercise done\n            // and change view\n            var nextEx = parseInt($route.current.params.id, 10) +1;\n            $('body').addClass('anim-from-right');\n            $('body').removeClass('anim-from-left');\n\n            // check for transition ending\n            $('.exercise__info').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                    console.log(\"transition ended\");\n                    // after transition has finished go to next exercise\n                    $scope.$apply(function(){\n                        $location.path('/exercise/' + nextEx);\n                    });\n                }\n            );\n\n        } else if( event.deltaY > 0) {\n            console.log(\"pan down\", event.deltaY);\n            if ( event.deltaY > $(window).height() * 0.2 ) {\n                // init overv scroll down fct in overview controller\n                $rootScope.$emit('overview:show');\n                // and scroll down info area\n                $scope.infoTransition = 1; // in seconds\n                $scope.infoDeltaY = $(window).height();\n\n                // check for transition ending\n                $('.exercise__info').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                        console.log(\"overview at bottom\");\n                        $scope.$apply(function(){\n                            $scope.infoDeltaY = 0;\n                        });\n                    }\n                );\n            } else {\n                // and scroll down info area\n                $scope.infoTransition = 1; // in seconds\n                $scope.infoDeltaY = 0;\n                $rootScope.$emit('overview:hide');\n            }\n\n        } else {\n            // change transition speed\n            $scope.infoTransition = 1; // in seconds\n            $scope.infoDeltaY = 0;\n        }\n\n    }\n\n    $scope.setBgColor = function (type) {\n        switch (type) {\n            case \"repetition\":\n            return 'clr-blue'; // return class name\n            break;\n\n            case \"weight\":\n            return 'clr-red'; // return class name\n            break;\n\n            case \"time\":\n            return 'clr-orange'; // return class name\n            break;\n\n            default:\n            return 'clr-orange'; // return class name\n        }\n    }\n\n}]);","app.controller('mainController', ['$scope', '$rootScope', '$route', '$location', function($scope, $rootScope, $route, $location) {\n\n    // $rootScope.$on('overview:show', function(event, data) {\n    //     // handle showOverview()\n    //     console.log(\"emit received\");\n\n    // })\n\n    $scope.goToURL = function(targetURL, direction) {\n        console.log(\"function goToURL\");\n        if(direction == 'fromLeft'){\n            $('body').addClass('anim-from-left');\n            $('body').removeClass('anim-from-right');\n        } else {\n            $('body').addClass('anim-from-right');\n            $('body').removeClass('anim-from-left');\n        }\n\n        $location.path(targetURL);\n    }\n\n\n\n}]);","app.controller('overviewController', ['$scope', '$rootScope', '$route', '$location', 'dataService', function($scope, $rootScope, $route, $location, dataService) {\n\n    $scope.panDeltaY = -$(window).height();\n    $scope.transitionSpeed = 0; // define duration in seconds\n\n    $scope.exercises = dataService.getExercises();\n\n    // undo overview display none\n    $scope.overviewDisplayState = \"inline\";\n\n    // listen to events\n    $rootScope.$on('overview:show', function(event, data) {\n        // handle showOverview()\n        $scope.overviewShow();\n    })\n\n    $rootScope.$on('overview:setTransitionSpeed', function(event, data) {\n        // handle showOverview()\n        // console.log(\"setTransitionSpeed: \" + data.speed);\n        $scope.transitionSpeed = data.speed;\n    })\n\n    // listen to events\n    $rootScope.$on('overview:hide', function(event, data) {\n        // handle showOverview()\n        $scope.transitionSpeed = 1; // in sec\n        $scope.panDeltaY = -$(window).height();\n    })\n\n    $rootScope.$on('overview:panDown', function(event, data) {\n        // handle showOverview()\n        $scope.panDeltaY = -$(window).height() + data.y;\n    })\n\n    $scope.setBgColor = function (type) {\n        switch (type) {\n            case \"repetition\":\n            return 'clr-blue'; // return class name\n            break;\n\n            case \"weight\":\n            return 'clr-red'; // return class name\n            break;\n\n            case \"time\":\n            return 'clr-orange'; // return class name\n            break;\n\n            default:\n            return 'clr-orange'; // return class name\n        }\n    }\n\n    $scope.goToURL = function(targetURL, direction) {\n        if(direction == 'fromLeft'){\n            $('body').addClass('anim-from-left');\n            $('body').removeClass('anim-from-right');\n        } else {\n            $('body').addClass('anim-from-right');\n            $('body').removeClass('anim-from-left');\n        }\n\n        $location.path(targetURL);\n    }\n\n    $scope.panOverviewUp = function (event) {\n        if(event.deltaY < 0){\n            $scope.transitionSpeed = 0; // in sec\n            $scope.panDeltaY = event.deltaY;\n            console.log(\"$scope.panDeltaY: \" + $scope.panDeltaY);\n        }\n    }\n\n    $scope.stopPanOverview = function (event) {\n        // if threshold is more than:\n        if (event.deltaY < (-$(window).height() * 0.15)) {\n            $scope.transitionSpeed = 1; // in sec\n            $scope.panDeltaY = - $(window).height();\n        } else {\n            $scope.transitionSpeed = 1; // in sec\n            $scope.panDeltaY = 0; //\n        }\n\n    }\n\n    $scope.swipeUp = function () {\n        console.log(\"swipe up\");\n        $scope.transitionSpeed = 1;\n        $scope.panDeltaY = - $(window).height();\n    }\n\n    $scope.overviewShow = function () {\n        // show overview from top to bottom\n        $scope.transitionSpeed = 1;\n        $scope.panDeltaY = 0;\n    }\n\n}]);","app.directive('paExercise', function() {\n  return {\n    scope: {\n      info: '='\n    },\n    templateUrl: 'js/directives/pa-exercise.html'\n  };\n});","app.directive('paOverview', function() {\n  return {\n    scope: {\n      info: '='\n    },\n    templateUrl: 'js/directives/pa-overview.html'\n  };\n});","app.directive('pickWheeld3', function() {\n    // all d3 stuff\n\n});","app.factory('dataService', function() {\n    var exercises = [\n        {\n            id: 1,\n            title: \"Push Ups\",\n            type: \"repetition\",\n            predefined: { rep: '10' },\n            imgSrc: \"pushups.svg\"\n        },\n        {\n            id: 2,\n            title: \"Pull Ups\",\n            type: \"repetition\",\n            predefined: { rep: '22' },\n            imgSrc: \"frontlift.svg\"\n        },\n        {\n            id: 3,\n            title: \"Shoulder Frontlift\",\n            type: \"weight\",\n            predefined: { rep: '3' },\n            imgSrc: \"frontlift.svg\"\n        },\n        {\n            id: 4,\n            title: \"Side Hip Raises\",\n            type: \"repetition\",\n            predefined: { rep: '4' },\n            imgSrc: \"sidehipraises.svg\"\n        },\n        {\n            id: 5,\n            title: \"Plank\",\n            type: \"time\",\n            predefined: { rep: '14' },\n            imgSrc: \"plank.svg\"\n        }\n    ];\n\n    var service = {\n        getExercises: function() {\n            return exercises;\n        }\n    };\n    return service;\n});\n"],"sourceRoot":"/source/"}