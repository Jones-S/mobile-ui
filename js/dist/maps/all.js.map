{"version":3,"sources":["app.js","functions.js","d3-controller.js","exerciseController.js","exercise.js","pick-wheeld3.js"],"names":[],"mappingszIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA","file":"all.js","sourcesContent":["var app = angular.module('physioApp', ['ngTouch', 'ngRoute', 'hmTouchEvents', 'ngAnimate']);\n\napp.config(['$routeProvider', function($routeProvider) {\n    $routeProvider\n        .when('/', {\n            templateUrl: 'views/start.html'\n        })\n        .when('/exercise/:id', {\n            templateUrl: 'views/exercise.html'\n        });\n}]);","(function ($) { // iief = Immediately-Invoked Function Expression, mainly useful to limit scope\n    $(function() { // Shorthand for $( document ).ready()\n\n\n\n    });\n}(jQuery));","app.controller('d3Controller', ['$scope', function($scope) {\n    $scope.scrollY = -15;\n    var currentScrollPos = 0;\n    var options = 20;\n\n    $scope.getOptions = function(){\n        return new Array(options);\n    }\n\n    $scope.panInput = function (event) {\n        // remove span panend class in case it was added before\n        $('.span--panend').removeClass('span--panend');\n\n        $scope.scrollY = event.deltaY + currentScrollPos;\n        checkPos();\n    }\n\n    $scope.stopPan = function (event) {\n        // save scroll Position to current\n        currentScrollPos = $scope.scrollY;\n        console.log(\"currentScrollPos: \" + currentScrollPos);\n        // check if end at top or bottom reached\n        var elemHeight = $('.input__inactive').first().height();\n        if(currentScrollPos > 140) {\n            currentScrollPos = 3*elemHeight;\n        } else if(currentScrollPos < -(options*elemHeight - 4*elemHeight)){\n            currentScrollPos = -(options*elemHeight - 4*elemHeight);\n        }\n        console.log(\"options*elemHeight + 2*elemHeight: \", -options*elemHeight);\n\n        var nearestPoint = roundTo(currentScrollPos, 40);\n        var deltaToStop = nearestPoint - currentScrollPos;\n        console.log(\"nearestPoint\", nearestPoint, \"point at stop\", currentScrollPos, \"delta\", deltaToStop);\n\n\n        // increase css transition duration to animate\n        $('.input__scroll-container').addClass(\"scroll-container--anim\");\n        $scope.scrollY = nearestPoint;\n\n        // check for transition ending\n        $('.scroll-container--anim').on('transitionend webkitTransitionEnd oTransitionEnd mozTransitionEnd msTransitionEnd', function () {\n                $('.input__scroll-container').removeClass(\"scroll-container--anim\");\n            }\n        );\n\n        checkPos(true, deltaToStop);\n\n    }\n\n\n    // ------------------- 3d.js -------------------\n\n    $scope.d3Transform = function(){\n        console.log(\"transform this shit\");\n\n        d3.selectAll(\".input__number\").transition()\n            .duration(750)\n            .style('color', 'red');\n    }\n\n    function checkPos(last, endPosition){\n        // set last to default value false\n        last = typeof last !== 'undefined' ? last : false;\n\n        // center of wrap to determine, which span should transform\n        // center + position of wrap from top\n        var middle = $('.input__wrap').height() / 2 + $('.input__wrap')[0].getBoundingClientRect().top;\n        var elemHeight = $('.input__inactive').first().height();\n        var selectionRange = {\n            min: middle - elemHeight/2,\n            max: middle + elemHeight/2\n        }\n        var transitionRange = {\n            min: selectionRange.min - elemHeight,\n            max: selectionRange.max + elemHeight/2\n        }\n\n\n        d3.selectAll(\".input__number\").each( function(d) {\n            var scaleValue, opacityValue;\n            var position = $(this)[0].getBoundingClientRect().top\n\n            if (last) {\n                // modify position if pan stopped and set wanted end pos\n                position = position + endPosition;\n            }\n\n            var range = position + $(this).height();\n            $(this).attr('data-pos', position);\n\n            if( selectionRange.min < position && position < middle){\n                scaleValue = \"scale(1) translateZ(0)\";\n                opacityValue = 1;\n                logValue = \"CASE: 0 – MIDDLE\";\n            } else if ( transitionRange.min <= position && position <= selectionRange.min ) {\n                // return a mapped value\n                var mappedScale = mapRange( position, transitionRange.min, selectionRange.min, 0.5, 1 );\n                opacityValue = mapRange( position, transitionRange.min, selectionRange.min, 0.2, 1 );\n                scaleValue = (\"scale(\" + mappedScale + \") translateZ(0)\" );\n                logValue = \"CASE: 1 – TRANS LOW\";\n            } else if ( middle <= position && position <= transitionRange.max ) {\n                // return a mapped value\n                var mappedScale = mapRange( position, middle, transitionRange.max, 1, 0.5 );\n                opacityValue = mapRange( position, middle, transitionRange.max, 1, 0.2 );\n                scaleValue = (\"scale(\" + mappedScale + \") translateZ(0)\" );\n                logValue = \"CASE: 2 – TRANS HIGH\";\n            } else {\n                scaleValue = \"scale(0.5) translateZ(0)\";\n                opacityValue = 0.2;\n                logValue = \"CASE: 3 – ELSE\";\n            }\n\n            // if is last check after panMove -> set css transitions\n            if(last==true){\n                // add class which sets transitions in css\n                d3.select(this).classed('span--panend', true);\n            }\n\n            d3.select(this).style('-webkit-transform', scaleValue);\n            d3.select(this).style('opacity', opacityValue);\n\n        });\n    }\n\n    //mapping function\n    function mapRange(value, low1, high1, low2, high2) {\n        return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n    }\n\n    //round function\n    function roundTo(num, round){\n        return Math.round(num/round) * round;\n    }\n\n\n\n\n}]);","app.controller('exerciseController', ['$scope', '$route', '$location', function($scope, $route, $location) {\n    $scope.infoDeltaY = 0;\n    $scope.infoDeltaY = 0;\n    $scope.infoTransition = 0; // define duration in seconds\n    $scope.exercises = [\n        {\n            id: 1,\n            title: \"Push Ups\",\n            type: \"repetition\",\n        },\n        {\n            id: 2,\n            title: \"Pull Ups\",\n            type: \"repetition\",\n        },\n        {\n            id: 3,\n            title: \"Bench Press\",\n            type: \"weight\",\n        },\n        {\n            id: 4,\n            title: \"Side Hip Raises\",\n            type: \"repetition\",\n        },\n        {\n            id: 5,\n            title: \"Plank\",\n            type: \"time\",\n        },\n    ];\n    $scope.totalExercises = $scope.exercises.length;\n\n    $scope.prev = function () {\n        var prevEx = parseInt($route.current.params.id, 10) -1;\n        // class to check if anim from left or right\n        $('body').addClass('anim-from-left');\n        $('body').removeClass('anim-from-right');\n        $location.path('/exercise/' + prevEx);\n    }\n\n    $scope.next = function () {\n        var nextEx = parseInt($route.current.params.id, 10) +1;\n        // class to check if anim from left or right\n        $('body').addClass('anim-from-right');\n        $('body').removeClass('anim-from-left');\n        $location.path('/exercise/' + nextEx);\n    }\n\n    $scope.currentExercise = function () {\n        return $scope.exercises[$route.current.params.id -1];\n    }\n\n    $scope.panInfoUp = function (event) {\n        // console.log(event.deltaY);\n        // set transition to 0 to have instantaneous reaction\n        $scope.infoTransition = 0; // in seconds\n        if(event.deltaY < 0){\n            $scope.infoDeltaY = event.deltaY;\n        }\n    }\n\n    $scope.stopPanInfo = function (event) {\n        // if over threshold -> move up totally\n        if($scope.infoDeltaY < -180 ){\n            $scope.infoDeltaY = -250;\n            // exerciseDone();\n        } else {\n            // change transition speed\n            $scope.infoTransition = 1; // in seconds\n            $scope.infoDeltaY = 0;\n        }\n\n    }\n\n}]);","app.directive('paExercise', function() {\n  return {\n    scope: {\n      info: '='\n    },\n    templateUrl: 'js/directives/pa-exercise.html'\n  };\n});","app.directive('pickWheeld3', function() {\n    // all d3 stuff\n\n});"],"sourceRoot":"/source/"}